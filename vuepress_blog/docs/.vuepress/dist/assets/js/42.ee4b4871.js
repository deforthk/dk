(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{720:function(t,a,e){"use strict";e.r(a);var l=e(3),s=Object(l.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",[t._v("记录一下@Transactional")])]),t._v(" "),e("h2",{attrs:{id:"异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rollbackFor "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("Exception分为运行时异常RuntimeException和非运行时异常")]),t._v(" "),e("p",[t._v("error是一定会回滚的")]),t._v(" "),e("p",[t._v("如果不对运行时异常进行处理，那么出现运行时异常之后，要么是线程中止，要么是主程序终止。")]),t._v(" "),e("p",[t._v("如果不想终止，则必须捕获所有的运行时异常，决不让这个处理线程退出。队列里面出现异常数据了，正常的处理应该是把异常数据舍弃，然后记录日志。")]),t._v(" "),e("p",[t._v("不应该由于异常数据而影响下面对正常数据的处理。")]),t._v(" "),e("p",[t._v("非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。")]),t._v(" "),e("h2",{attrs:{id:"事务管理方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务管理方式"}},[t._v("#")]),t._v(" 事务管理方式")]),t._v(" "),e("p",[t._v("事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。")]),t._v(" "),e("p",[t._v("spring支持编程式事务管理和声明式事务管理两种方式。")]),t._v(" "),e("p",[t._v("编程式事务管理使用TransactionTemplate或者直接使用底层的PlatformTransactionManager。对于编程式事务管理，spring推荐使用TransactionTemplate。")]),t._v(" "),e("p",[t._v("声明式事务管理建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。")]),t._v(" "),e("p",[t._v("声明式事务管理也有两种常用的方式，一种是基于tx和aop名字空间的xml配置文件，另一种就是基于@Transactional注解。显然基于注解的方式更简单易用，更清爽。")]),t._v(" "),e("h2",{attrs:{id:"使用说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用说明"}},[t._v("#")]),t._v(" 使用说明")]),t._v(" "),e("p",[t._v("当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。")]),t._v(" "),e("p",[t._v("在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。")]),t._v(" "),e("p",[t._v("在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚。")]),t._v(" "),e("p",[t._v("加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚。")]),t._v(" "),e("h2",{attrs:{id:"transactional属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactional属性"}},[t._v("#")]),t._v(" @Transactional属性")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("属性")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("value")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("可选的限定描述符，指定使用的事务管理器")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("propagation")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("enum: Propagation")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("可选的事务传播行为设置")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("isolation")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("enum: Isolation")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("可选的事务隔离级别设置")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("readOnly")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("读写或只读事务，默认读写")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("timeout")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("int (in seconds granularity)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("事务超时时间设置")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("rollbackFor")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Class对象数组，必须继承自Throwable")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("导致事务回滚的异常类数组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("rollbackForClassName")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类名数组，必须继承自Throwable")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("导致事务回滚的异常类名字数组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("noRollbackFor")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Class对象数组，必须继承自Throwable")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("不会导致事务回滚的异常类数组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("noRollbackForClassName")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类名数组，必须继承自Throwable")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("不会导致事务回滚的异常类名字数组")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);